
---
 - name: Create subnet for sftp server
   ec2_vpc_subnet:
     state: present
     region: "{{ ec2_region }}"
     vpc_id: "{{ vpc_id }}"
     cidr: "{{ subnet_cidr }}"
     resource_tags:
       Name: SFTP Server
     aws_access_key: "{{ aws_access_key }}"
     aws_secret_key: "{{ aws_secret_key }}"
   register: sftp_subnet

 - name: Create security group for sftp server
   ec2_group:
    name: sftp-security-group
    description: security group for sftp server
    vpc_id: "{{ vpc_id }}"
    region: "{{ ec2_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
   register: sftpsg

 - name: Create role for EC2 to access S3 and SES
   iam_role:
     name: "{{ ec2_attached_role }}"
     assume_role_policy_document:
      Version: '2012-10-17'
      Statement:
      - Effect: Allow
        Principal:
          Service:
          - ec2.amazonaws.com
        Action:
          - sts:AssumeRole
     state: present
     managed_policy:
      - arn:aws:iam::aws:policy/AmazonS3FullAccess
      - arn:aws:iam::aws:policy/AmazonSESFullAccess
     aws_access_key: "{{ aws_access_key }}"
     aws_secret_key: "{{ aws_secret_key }}"
   register: sftprole

 - name: Provision EC2 Box
   local_action:
     module: ec2
     key_name: "{{ ec2_keypair }}"
     group_id: "{{ sftpsg.group_id }}"
     instance_type: "{{ ec2_instance_type }}"
     image: "{{ ec2_image }}"
     vpc_subnet_id: "{{ sftp_subnet.subnet.id }}"
     region: "{{ ec2_region }}"
     instance_profile_name: "sftp-server-s3-ses-access"
     instance_tags: '{"Name":"{{ec2_tag_Name}}","Type":"{{ec2_tag_Type}}","Environment":"{{ec2_tag_Environment}}"}'
     assign_public_ip: yes
     wait: true
     wait_timeout: 500
     count: 1
     aws_access_key: "{{ aws_access_key }}"
     aws_secret_key: "{{ aws_secret_key }}"
   register: ec2

 - debug: var=item
   with_items: ec2.instances

 - name: Add new instances to host group
   add_host: hostname={{item.public_dns_name}} groupname=deploy
   with_items: "{{ec2.instances}}"

 - name: Wait for the instances to boot by checking the ssh port
   wait_for: host={{item.public_dns_name}} port=22 delay=60 timeout=320 state=started
   with_items: "{{ec2.instances}}"
